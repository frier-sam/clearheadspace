import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { useForm } from 'react-hook-form';\nimport {\n  PlusIcon,\n  PencilIcon,\n  TrashIcon,\n  UserGroupIcon,\n  CalendarIcon,\n  ClockIcon,\n  ChartBarIcon,\n  Cog6ToothIcon,\n  HeartIcon,\n  EyeIcon,\n  CheckCircleIcon,\n  XMarkIcon,\n  ExclamationTriangleIcon\n} from '@heroicons/react/24/outline';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { \n  createDocument, \n  getDocuments, \n  updateDocument, \n  deleteDocument \n} from '../../services/firebase';\nimport LoadingSpinner from '../LoadingSpinner';\nimport { formatCurrency, getInitials, getAvatarColor } from '../../utils/helpers';\nimport toast from 'react-hot-toast';\n\nconst AdminDashboard = () => {\n  const { currentUser, userProfile } = useAuth();\n  const [activeTab, setActiveTab] = useState('therapists');\n  const [therapists, setTherapists] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [bookings, setBookings] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [selectedTherapist, setSelectedTherapist] = useState(null);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    setValue\n  } = useForm();\n\n  const tabs = [\n    { id: 'therapists', name: 'Therapists', icon: UserGroupIcon, count: therapists.length },\n    { id: 'users', name: 'Users', icon: UserGroupIcon, count: users.length },\n    { id: 'bookings', name: 'Bookings', icon: CalendarIcon, count: bookings.length },\n    { id: 'analytics', name: 'Analytics', icon: ChartBarIcon, count: 0 }\n  ];\n\n  const therapyTypes = ['therapist', 'buddy'];\n  const specialties = [\n    'Anxiety', 'Depression', 'Relationships', 'Stress Management',\n    'Life Transitions', 'Mindfulness', 'Goal Setting', 'Motivation',\n    'Self-Care', 'Couples Therapy', 'Family Dynamics', 'Communication',\n    'Grief Counseling', 'Addiction Recovery', 'PTSD', 'Eating Disorders'\n  ];\n\n  const timeSlots = [\n    '08:00', '09:00', '10:00', '11:00', '12:00', '13:00',\n    '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00'\n  ];\n\n  const daysOfWeek = [\n    'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'\n  ];\n\n  // Check if user is admin\n  const isAdmin = userProfile?.role === 'admin' || currentUser?.email === 'admin@clearheadspace.com';\n\n  useEffect(() => {\n    if (!isAdmin) {\n      toast.error('Access denied. Admin privileges required.');\n      return;\n    }\n    loadData();\n  }, [isAdmin]);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const [therapistsData, usersData, bookingsData] = await Promise.all([\n        getDocuments('therapists'),\n        getDocuments('users'),\n        getDocuments('bookings')\n      ]);\n\n      setTherapists(therapistsData.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n      setUsers(usersData.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n      setBookings(bookingsData.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n    } catch (error) {\n      console.error('Error loading data:', error);\n      toast.error('Failed to load admin data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddTherapist = async (data) => {\n    try {\n      const therapistData = {\n        name: data.name,\n        title: data.title,\n        email: data.email,\n        phone: data.phone,\n        specialties: data.specialties || [],\n        bio: data.bio,\n        hourlyRate: parseFloat(data.hourlyRate),\n        type: data.type,\n        rating: 5.0,\n        isActive: true,\n        availability: {\n          monday: data.mondaySlots || [],\n          tuesday: data.tuesdaySlots || [],\n          wednesday: data.wednesdaySlots || [],\n          thursday: data.thursdaySlots || [],\n          friday: data.fridaySlots || [],\n          saturday: data.saturdaySlots || [],\n          sunday: data.sundaySlots || []\n        },\n        image: data.image || `https://ui-avatars.com/api/?name=${encodeURIComponent(data.name)}&size=400&background=random`\n      };\n\n      const docRef = await createDocument('therapists', therapistData);\n      setTherapists(prev => [...prev, { id: docRef.id, ...therapistData }]);\n      setShowAddModal(false);\n      reset();\n      toast.success('Therapist added successfully!');\n    } catch (error) {\n      console.error('Error adding therapist:', error);\n      toast.error('Failed to add therapist');\n    }\n  };\n\n  const handleEditTherapist = async (data) => {\n    try {\n      const therapistData = {\n        name: data.name,\n        title: data.title,\n        email: data.email,\n        phone: data.phone,\n        specialties: data.specialties || [],\n        bio: data.bio,\n        hourlyRate: parseFloat(data.hourlyRate),\n        type: data.type,\n        isActive: data.isActive,\n        availability: {\n          monday: data.mondaySlots || [],\n          tuesday: data.tuesdaySlots || [],\n          wednesday: data.wednesdaySlots || [],\n          thursday: data.thursdaySlots || [],\n          friday: data.fridaySlots || [],\n          saturday: data.saturdaySlots || [],\n          sunday: data.sundaySlots || []\n        },\n        image: data.image || selectedTherapist.image\n      };\n\n      await updateDocument('therapists', selectedTherapist.id, therapistData);\n      setTherapists(prev => prev.map(t => \n        t.id === selectedTherapist.id ? { ...t, ...therapistData } : t\n      ));\n      setShowEditModal(false);\n      setSelectedTherapist(null);\n      reset();\n      toast.success('Therapist updated successfully!');\n    } catch (error) {\n      console.error('Error updating therapist:', error);\n      toast.error('Failed to update therapist');\n    }\n  };\n\n  const handleDeleteTherapist = async () => {\n    try {\n      await deleteDocument('therapists', selectedTherapist.id);\n      setTherapists(prev => prev.filter(t => t.id !== selectedTherapist.id));\n      setShowDeleteModal(false);\n      setSelectedTherapist(null);\n      toast.success('Therapist deleted successfully!');\n    } catch (error) {\n      console.error('Error deleting therapist:', error);\n      toast.error('Failed to delete therapist');\n    }\n  };\n\n  const openEditModal = (therapist) => {\n    setSelectedTherapist(therapist);\n    \n    // Populate form with therapist data\n    setValue('name', therapist.name);\n    setValue('title', therapist.title);\n    setValue('email', therapist.email);\n    setValue('phone', therapist.phone);\n    setValue('specialties', therapist.specialties);\n    setValue('bio', therapist.bio);\n    setValue('hourlyRate', therapist.hourlyRate);\n    setValue('type', therapist.type);\n    setValue('isActive', therapist.isActive);\n    setValue('image', therapist.image);\n    \n    // Set availability\n    daysOfWeek.forEach(day => {\n      setValue(`${day}Slots`, therapist.availability?.[day] || []);\n    });\n    \n    setShowEditModal(true);\n  };\n\n  if (!isAdmin) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 to-red-100\">\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"text-center p-8 bg-white rounded-2xl shadow-xl\"\n        >\n          <ExclamationTriangleIcon className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">Access Denied</h2>\n          <p className=\"text-gray-600\">You need admin privileges to access this page.</p>\n        </motion.div>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"large\" message=\"Loading admin dashboard...\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-lg border-b border-white/20 sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary-500 to-secondary-500 rounded-xl flex items-center justify-center\">\n                <HeartIcon className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-800\">Admin Dashboard</h1>\n                <p className=\"text-sm text-gray-600\">ClearHeadSpace Management</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-600\">Welcome, {userProfile?.displayName}</span>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm ${getAvatarColor(userProfile?.displayName || 'Admin')}`}>\n                {getInitials(userProfile?.displayName || 'Admin')}\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Tabs */}\n        <div className=\"mb-8\">\n          <div className=\"flex space-x-1 bg-gray-100 rounded-xl p-1\">\n            {tabs.map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`flex-1 flex items-center justify-center px-4 py-3 text-sm font-medium rounded-lg transition-all ${\n                  activeTab === tab.id\n                    ? 'bg-white text-primary-600 shadow-sm'\n                    : 'text-gray-600 hover:text-gray-800'\n                }`}\n              >\n                <tab.icon className=\"w-5 h-5 mr-2\" />\n                {tab.name}\n                {tab.count > 0 && (\n                  <span className={`ml-2 px-2 py-1 text-xs rounded-full ${\n                    activeTab === tab.id\n                      ? 'bg-primary-100 text-primary-600'\n                      : 'bg-gray-200 text-gray-600'\n                  }`}>\n                    {tab.count}\n                  </span>\n                )}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Content */}\n        <motion.div\n          key={activeTab}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n        >\n          {/* Therapists Tab */}\n          {activeTab === 'therapists' && (\n            <div>\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-2xl font-bold text-gray-800\">Therapists Management</h2>\n                <button\n                  onClick={() => setShowAddModal(true)}\n                  className=\"btn btn-primary flex items-center\"\n                >\n                  <PlusIcon className=\"w-5 h-5 mr-2\" />\n                  Add Therapist\n                </button>\n              </div>\n\n              <div className=\"grid gap-6\">\n                {therapists.map((therapist) => (\n                  <motion.div\n                    key={therapist.id}\n                    initial={{ opacity: 0, scale: 0.95 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"card hover:shadow-lg transition-all duration-300\"\n                  >\n                    <div className=\"flex flex-col lg:flex-row gap-6\">\n                      <div className=\"flex-shrink-0\">\n                        <img\n                          src={therapist.image}\n                          alt={therapist.name}\n                          className=\"w-24 h-24 rounded-xl object-cover\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"text-lg font-semibold text-gray-800 mb-1\">\n                              {therapist.name}\n                            </h3>\n                            <p className=\"text-gray-600 mb-2\">{therapist.title}</p>\n                            <div className=\"flex items-center space-x-4 text-sm text-gray-500 mb-3\">\n                              <span className=\"capitalize\">{therapist.type}</span>\n                              <span>{formatCurrency(therapist.hourlyRate)}/hr</span>\n                              <span className={`px-2 py-1 rounded-full text-xs ${\n                                therapist.isActive \n                                  ? 'bg-green-100 text-green-700' \n                                  : 'bg-red-100 text-red-700'\n                              }`}>\n                                {therapist.isActive ? 'Active' : 'Inactive'}\n                              </span>\n                            </div>\n                            <p className=\"text-gray-700 text-sm mb-3 line-clamp-2\">\n                              {therapist.bio}\n                            </p>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {therapist.specialties.slice(0, 3).map((specialty) => (\n                                <span\n                                  key={specialty}\n                                  className=\"px-2 py-1 bg-primary-100 text-primary-700 text-xs rounded-full\"\n                                >\n                                  {specialty}\n                                </span>\n                              ))}\n                              {therapist.specialties.length > 3 && (\n                                <span className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full\">\n                                  +{therapist.specialties.length - 3}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <button\n                              onClick={() => openEditModal(therapist)}\n                              className=\"p-2 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors\"\n                              title=\"Edit\"\n                            >\n                              <PencilIcon className=\"w-5 h-5\" />\n                            </button>\n                            <button\n                              onClick={() => {\n                                setSelectedTherapist(therapist);\n                                setShowDeleteModal(true);\n                              }}\n                              className=\"p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors\"\n                              title=\"Delete\"\n                            >\n                              <TrashIcon className=\"w-5 h-5\" />\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Users Tab */}\n          {activeTab === 'users' && (\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Users Management</h2>\n              \n              <div className=\"grid gap-4\">\n                {users.map((user) => (\n                  <div key={user.id} className=\"card\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-12 h-12 rounded-full flex items-center justify-center text-white font-bold ${getAvatarColor(user.displayName || user.email)}`}>\n                        {user.photoURL ? (\n                          <img src={user.photoURL} alt={user.displayName} className=\"w-full h-full rounded-full object-cover\" />\n                        ) : (\n                          getInitials(user.displayName || user.email)\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-gray-800\">{user.displayName || 'No Name'}</h3>\n                        <p className=\"text-gray-600 text-sm\">{user.email}</p>\n                        <p className=\"text-gray-500 text-xs\">Joined: {user.createdAt?.toDate?.()?.toLocaleDateString() || 'Unknown'}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <span className={`px-3 py-1 rounded-full text-xs font-medium ${\n                          user.isActive \n                            ? 'bg-green-100 text-green-700' \n                            : 'bg-gray-100 text-gray-600'\n                        }`}>\n                          {user.isActive ? 'Active' : 'Inactive'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Bookings Tab */}\n          {activeTab === 'bookings' && (\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Bookings Management</h2>\n              \n              <div className=\"grid gap-4\">\n                {bookings.map((booking) => (\n                  <div key={booking.id} className=\"card\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"font-semibold text-gray-800\">{booking.therapistName}</h3>\n                        <p className=\"text-gray-600 text-sm\">with {booking.userName}</p>\n                        <p className=\"text-gray-500 text-xs\">\n                          {booking.date} at {booking.time} ({booking.duration} min)\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <span className={`px-3 py-1 rounded-full text-xs font-medium ${\n                          booking.status === 'confirmed' ? 'bg-green-100 text-green-700' :\n                          booking.status === 'completed' ? 'bg-blue-100 text-blue-700' :\n                          booking.status === 'cancelled' ? 'bg-red-100 text-red-700' :\n                          'bg-gray-100 text-gray-600'\n                        }`}>\n                          {booking.status}\n                        </span>\n                        <p className=\"text-gray-600 text-sm mt-1\">{formatCurrency(booking.amount)}</p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Analytics Tab */}\n          {activeTab === 'analytics' && (\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Analytics</h2>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n                <div className=\"card\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n                      <UserGroupIcon className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm text-gray-600\">Total Users</p>\n                      <p className=\"text-2xl font-bold text-gray-800\">{users.length}</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"card\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n                      <UserGroupIcon className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm text-gray-600\">Active Therapists</p>\n                      <p className=\"text-2xl font-bold text-gray-800\">{therapists.filter(t => t.isActive).length}</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"card\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center\">\n                      <CalendarIcon className=\"w-6 h-6 text-purple-600\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm text-gray-600\">Total Bookings</p>\n                      <p className=\"text-2xl font-bold text-gray-800\">{bookings.length}</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"card\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-yellow-100 rounded-xl flex items-center justify-center\">\n                      <ChartBarIcon className=\"w-6 h-6 text-yellow-600\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm text-gray-600\">Revenue</p>\n                      <p className=\"text-2xl font-bold text-gray-800\">\n                        {formatCurrency(bookings.reduce((sum, b) => sum + (b.amount || 0), 0))}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </motion.div>\n      </div>\n\n      {/* Add Therapist Modal */}\n      {showAddModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <motion.div\n            initial={{ scale: 0.9, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            className=\"bg-white rounded-2xl p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto\"\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold text-gray-800\">Add New Therapist</h3>\n              <button\n                onClick={() => setShowAddModal(false)}\n                className=\"p-2 text-gray-400 hover:text-gray-600\"\n              >\n                <XMarkIcon className=\"w-6 h-6\" />\n              </button>\n            </div>\n\n            <form onSubmit={handleSubmit(handleAddTherapist)} className=\"space-y-6\">\n              {/* Basic Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Name *</label>\n                  <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    {...register('name', { required: 'Name is required' })}\n                  />\n                  {errors.name && <p className=\"text-red-600 text-sm mt-1\">{errors.name.message}</p>}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Title *</label>\n                  <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    placeholder=\"e.g., Licensed Clinical Psychologist\"\n                    {...register('title', { required: 'Title is required' })}\n                  />\n                  {errors.title && <p className=\"text-red-600 text-sm mt-1\">{errors.title.message}</p>}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email *</label>\n                  <input\n                    type=\"email\"\n                    className=\"input-field\"\n                    {...register('email', { required: 'Email is required' })}\n                  />\n                  {errors.email && <p className=\"text-red-600 text-sm mt-1\">{errors.email.message}</p>}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Phone</label>\n                  <input\n                    type=\"tel\"\n                    className=\"input-field\"\n                    {...register('phone')}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Type *</label>\n                  <select\n                    className=\"input-field\"\n                    {...register('type', { required: 'Type is required' })}\n                  >\n                    <option value=\"\">Select type</option>\n                    <option value=\"therapist\">Licensed Therapist</option>\n                    <option value=\"buddy\">Support Buddy</option>\n                  </select>\n                  {errors.type && <p className=\"text-red-600 text-sm mt-1\">{errors.type.message}</p>}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Hourly Rate *</label>\n                  <input\n                    type=\"number\"\n                    step=\"0.01\"\n                    className=\"input-field\"\n                    {...register('hourlyRate', { required: 'Hourly rate is required' })}\n                  />\n                  {errors.hourlyRate && <p className=\"text-red-600 text-sm mt-1\">{errors.hourlyRate.message}</p>}\n                </div>\n              </div>\n\n              {/* Bio */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Bio *</label>\n                <textarea\n                  rows={4}\n                  className=\"input-field\"\n                  {...register('bio', { required: 'Bio is required' })}\n                />\n                {errors.bio && <p className=\"text-red-600 text-sm mt-1\">{errors.bio.message}</p>}\n              </div>\n\n              {/* Specialties */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-3\">Specialties</label>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  {specialties.map((specialty) => (\n                    <label key={specialty} className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        value={specialty}\n                        className=\"mr-2\"\n                        {...register('specialties')}\n                      />\n                      <span className=\"text-sm\">{specialty}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              {/* Availability */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-3\">Availability</label>\n                <div className=\"space-y-4\">\n                  {daysOfWeek.map((day) => (\n                    <div key={day}>\n                      <label className=\"block text-sm font-medium text-gray-600 mb-2 capitalize\">\n                        {day}\n                      </label>\n                      <div className=\"grid grid-cols-4 md:grid-cols-6 gap-2\">\n                        {timeSlots.map((time) => (\n                          <label key={time} className=\"flex items-center\">\n                            <input\n                              type=\"checkbox\"\n                              value={time}\n                              className=\"mr-2\"\n                              {...register(`${day}Slots`)}\n                            />\n                            <span className=\"text-xs\">{time}</span>\n                          </label>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-4\">\n                <button\n                  type=\"button\"\n                  onClick={() => setShowAddModal(false)}\n                  className=\"btn btn-outline\"\n                >\n                  Cancel\n                </button>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Add Therapist\n                </button>\n              </div>\n            </form>\n          </motion.div>\n        </div>\n      )}\n\n      {/* Edit Modal - Similar structure but with populated data */}\n      {showEditModal && selectedTherapist && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <motion.div\n            initial={{ scale: 0.9, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            className=\"bg-white rounded-2xl p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto\"\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold text-gray-800\">Edit Therapist</h3>\n              <button\n                onClick={() => setShowEditModal(false)}\n                className=\"p-2 text-gray-400 hover:text-gray-600\"\n              >\n                <XMarkIcon className=\"w-6 h-6\" />\n              </button>\n            </div>\n\n            <form onSubmit={handleSubmit(handleEditTherapist)} className=\"space-y-6\">\n              {/* Same form structure as Add, but with pre-populated values */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Name *</label>\n                  <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    {...register('name', { required: 'Name is required' })}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Title *</label>\n                  <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    {...register('title', { required: 'Title is required' })}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email *</label>\n                  <input\n                    type=\"email\"\n                    className=\"input-field\"\n                    {...register('email', { required: 'Email is required' })}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Phone</label>\n                  <input\n                    type=\"tel\"\n                    className=\"input-field\"\n                    {...register('phone')}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Type *</label>\n                  <select\n                    className=\"input-field\"\n                    {...register('type', { required: 'Type is required' })}\n                  >\n                    <option value=\"therapist\">Licensed Therapist</option>\n                    <option value=\"buddy\">Support Buddy</option>\n                  </select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Hourly Rate *</label>\n                  <input\n                    type=\"number\"\n                    step=\"0.01\"\n                    className=\"input-field\"\n                    {...register('hourlyRate', { required: 'Hourly rate is required' })}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Status</label>\n                  <select\n                    className=\"input-field\"\n                    {...register('isActive')}\n                  >\n                    <option value={true}>Active</option>\n                    <option value={false}>Inactive</option>\n                  </select>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Bio *</label>\n                <textarea\n                  rows={4}\n                  className=\"input-field\"\n                  {...register('bio', { required: 'Bio is required' })}\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-4\">\n                <button\n                  type=\"button\"\n                  onClick={() => setShowEditModal(false)}\n                  className=\"btn btn-outline\"\n                >\n                  Cancel\n                </button>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Update Therapist\n                </button>\n              </div>\n            </form>\n          </motion.div>\n        </div>\n      )}\n\n      {/* Delete Confirmation Modal */}\n      {showDeleteModal && selectedTherapist && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <motion.div\n            initial={{ scale: 0.9, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            className=\"bg-white rounded-2xl p-6 max-w-md w-full\"\n          >\n            <div className=\"text-center\">\n              <ExclamationTriangleIcon className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-bold text-gray-800 mb-2\">Delete Therapist</h3>\n              <p className=\"text-gray-600 mb-6\">\n                Are you sure you want to delete {selectedTherapist.name}? This action cannot be undone.\n              </p>\n              \n              <div className=\"flex space-x-4\">\n                <button\n                  onClick={() => setShowDeleteModal(false)}\n                  className=\"flex-1 btn btn-outline\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handleDeleteTherapist}\n                  className=\"flex-1 bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors\"\n                >\n                  Delete\n                </button>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdminDashboard;", "oldText": "// AdminDashboard component"}]