name: Deploy to Firebase

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_ID: clearheadspace

jobs:
  # Job 1: Lint and Test
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci
          
      - name: Run linting
        run: npm run lint --if-present
        
      - name: Run tests
        run: npm test --if-present
        
      - name: Build application
        run: npm run build
        
      - name: Build functions
        run: |
          cd functions
          npm run build

  # # Job 2: Security Scan
  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: test
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
        
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'
          
  #     - name: Install dependencies
  #       run: npm ci
        
  #     - name: Run security audit
  #       run: npm audit --audit-level=moderate
        
  #     - name: Check for vulnerabilities
  #       run: npm audit --audit-level=high --production

  # # Job 3: Deploy to Staging (develop branch)
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [test, security]
  #   if: github.ref == 'refs/heads/develop'
    
  #   environment:
  #     name: staging
  #     url: https://clearheadspace-staging.web.app
      
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
        
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'
          
  #     - name: Install dependencies
  #       run: |
  #         npm ci
  #         cd functions && npm ci
          
  #     - name: Build application
  #       run: npm run build
  #       env:
  #         REACT_APP_FIREBASE_API_KEY: ${{ secrets.STAGING_FIREBASE_API_KEY }}
  #         REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.STAGING_FIREBASE_AUTH_DOMAIN }}
  #         REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
  #         REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
  #         REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}
  #         REACT_APP_FIREBASE_APP_ID: ${{ secrets.STAGING_FIREBASE_APP_ID }}
  #         REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.STAGING_FIREBASE_MEASUREMENT_ID }}
          
  #     - name: Build functions
  #       run: |
  #         cd functions
  #         npm run build
          
  #     - name: Deploy to Firebase Staging
  #       uses: FirebaseExtended/action-hosting-deploy@v0
  #       with:
  #         repoToken: '${{ secrets.GITHUB_TOKEN }}'
  #         firebaseServiceAccount: '${{ secrets.STAGING_FIREBASE_SERVICE_ACCOUNT }}'
  #         projectId: '${{ env.FIREBASE_PROJECT_ID }}-staging'
  #         channelId: staging
          
  #     - name: Deploy Functions to Staging
  #       run: |
  #         npm install -g firebase-tools
  #         firebase deploy --only functions --project ${{ env.FIREBASE_PROJECT_ID }}-staging --token ${{ secrets.FIREBASE_TOKEN }}

  # Job 4: Deploy to Production (main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://clearheadspace.web.app
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci
          
      - name: Build application
        run: npm run build
        env:
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.PROD_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.PROD_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.PROD_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.PROD_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.PROD_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.PROD_FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.PROD_FIREBASE_MEASUREMENT_ID }}
          
      - name: Build functions
        run: |
          cd functions
          npm run build
          
      - name: Deploy to Firebase Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.PROD_FIREBASE_SERVICE_ACCOUNT }}'
          projectId: '${{ env.FIREBASE_PROJECT_ID }}'
          
      - name: Deploy Functions to Production
        run: |
          npm install -g firebase-tools
          firebase deploy --only functions --project ${{ env.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}
          
      - name: Deploy Firestore Rules
        run: |
          firebase deploy --only firestore:rules --project ${{ env.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}
          
      - name: Deploy Storage Rules  
        run: |
          firebase deploy --only storage --project ${{ env.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}

  # # Job 5: Lighthouse Performance Audit (Production only)
  # lighthouse:
  #   name: Lighthouse Audit
  #   runs-on: ubuntu-latest
  #   needs: deploy-production
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
        
  #     - name: Run Lighthouse CI
  #       uses: treosh/lighthouse-ci-action@v9
  #       with:
  #         urls: |
  #           https://clearheadspace.web.app
  #           https://clearheadspace.web.app/signin
  #           https://clearheadspace.web.app/signup
  #         uploadArtifacts: true
  #         temporaryPublicStorage: true
          
  # # Job 6: Notify Slack (Production deployments)
  # notify:
  #   name: Notify Team
  #   runs-on: ubuntu-latest
  #   needs: [deploy-production, lighthouse]
  #   if: always() && github.ref == 'refs/heads/main'
    
  #   steps:
  #     - name: Notify Slack on Success
  #       if: needs.deploy-production.result == 'success'
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: success
  #         text: 'üöÄ ClearHeadSpace has been successfully deployed to production!'
  #         webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
  #     - name: Notify Slack on Failure
  #       if: needs.deploy-production.result == 'failure'
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: failure
  #         text: '‚ùå ClearHeadSpace production deployment failed!'
  #         webhook_url: ${{ secrets.SLACK_WEBHOOK }}

#   # Job 7: Database Backup (Weekly)
#   backup:
#     name: Database Backup
#     runs-on: ubuntu-latest
#     if: github.event_name == 'schedule'
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
        
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
          
#       - name: Install Firebase CLI
#         run: npm install -g firebase-tools
        
#       - name: Backup Firestore
#         run: |
#           firebase firestore:export gs://${{ env.FIREBASE_PROJECT_ID }}-backups/$(date +%Y%m%d) --project ${{ env.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}
          
#       - name: Cleanup old backups
#         run: |
#           # Keep only last 30 days of backups
#           gsutil -m rm -r gs://${{ env.FIREBASE_PROJECT_ID }}-backups/$(date -d '30 days ago' +%Y%m%d)* || true

# # Schedule for weekly database backup
# on:
#   schedule:
#     - cron: '0 2 * * 0'  # Every Sunday at 2 AM UTC
